<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <modules>
        <module>database</module>
        <module>service</module>
        <module>web</module>
    </modules>

    <groupId>com.grayroom</groupId>
    <artifactId>maven-example</artifactId>
    <version>1.0.0</version>
    <packaging>pom</packaging>

    <name>maven-example</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>17</maven.compiler.source>
        <maven.compiler.target>17</maven.compiler.target>
        <app.env>local-var</app.env>
    </properties>

    <dependencyManagement>
        <dependencies>
            <dependency>
                <groupId>jakarta.servlet</groupId>
                <artifactId>jakarta.servlet-api</artifactId>
                <version>6.0.0</version>
                <scope>provided</scope>
                <!--   provided scope говорит о том, что эта зависимость будет предоставлена чем-то.
                    В данном случает Tomcat должен предоставить зависимость    -->
            </dependency>

            <dependency>
                <groupId>org.postgresql</groupId>
                <artifactId>postgresql</artifactId>
                <version>42.5.4</version>
                <scope>runtime</scope>
                <!--   runtime scope говорит о том, что эта зависимость будет использоваться только во время
                    выполнения приложения, т.к. во время компиляции данная зависимость не нужна-->
                <optional>true</optional>
            </dependency>

            <dependency>
                <groupId>junit</groupId>
                <artifactId>junit</artifactId>
                <version>4.13.2</version>
                <scope>test</scope>
                <!--   provided scope говорит о том, что эта зависимость будет использоваться только во время
                прогонки тестов-->
            </dependency>
            <!--   compile scope является scope по умолчанию(если scope не указан, то будет использован scope compile)
                и говорит о том, что данная зависимость будет доступна во время компиляции-->
            <!--   system scope говорит о том, что эта зависимость находится на локальной машине и этот
                scope лучше не использовать-->


            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-webmvc</artifactId>
                <version>5.3.20</version>
                <exclusions>
                    <exclusion>
                        <groupId>org.springframework</groupId>
                        <artifactId>spring-beans</artifactId>
                    </exclusion>
                </exclusions>
            </dependency>
            <dependency>
                <groupId>org.springframework</groupId>
                <artifactId>spring-aop</artifactId>
                <version>6.0.6</version>
            </dependency>
            <!--  У двух зависимостей выше есть общие транзитивные зависимости. И по умолчанию
              maven будет использовать версию из той зависимости, которая находится выше.
              Чтобы переопределить такое поведение, необходимо прописать тег exclusion в верхней зависимости
              и исключить оттуда эту транзитивную зависимость-->

            <dependency>
                <groupId>mysql</groupId>
                <artifactId>mysql-connector-java</artifactId>
                <version>8.0.33</version>
                <scope>runtime</scope>
                <optional>true</optional>
                <!--    В другом проекте, который будет подтягивать данный проект как зависимость нужно будет
                определиться с тем какую из транзитивных зависимостей использовать: mysql-connector-java или postgresql-->
            </dependency>
        </dependencies>
    </dependencyManagement>

    <build>
        <!--        <finalName>MavenWebApp</finalName>-->
        <!--        &lt;!&ndash;    Устанавливаем имя для итогового war файла   &ndash;&gt;-->
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <version>3.3.1</version>

                <executions>
                    <execution>
                        <id>Copy docker-compose.yml to target</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>copy-resources</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.basedir}/target</outputDirectory>
                            <resources>
                                <resource>
                                    <directory>${project.basedir}/docker</directory>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
                <!--    Вызываем goal copy-resources из maven-resources-plugin в фазе validate  -->
            </plugin>
        </plugins>

        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>0.8.10</version>

                    <executions>
                        <execution>
                            <id>prepare-agent</id>
                            <goals>
                                <goal>prepare-agent</goal>
                            </goals>
                        </execution>
                        <execution>
                            <id>generate-jacoco-report</id>
                            <goals>
                                <goal>report</goal>
                            </goals>
                            <phase>prepare-package</phase>
                        </execution>
                    </executions>
                </plugin>
                <!--Добавляем Jacoco плагин для того, чтобы формировать отчеты по тестам-->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>3.1.2</version>

                    <executions>
                        <execution>
                            <goals>
                                <goal>integration-test</goal>
                                <goal>verify</goal>
                            </goals>
                        </execution>
                    </executions>
                </plugin>
                <!--    Добавляем плагин, который запускает интеграционные тесты
                голы integration-test и verify автоматически будут привязаны к соответствующим фазам    -->

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.2.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.3.1</version>
                </plugin>

                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.11.0</version>
                    <configuration>
                        <source>17</source>
                        <target>17</target>
                    </configuration>
                </plugin>
                <!--    Чтобы переопределить дефолтные настройки какого-либо плагина в теге
                <build><pluginManagement><plugins><plugin> для плагина нужно указать нужные настройки.
                Например, тут указывается версия отличная от той, что указана в super pom.
                Так же в теге <configuration> указывается какую версию java необходимо использовать
                на этапе компиляции и в исходных java файлах    -->


                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>3.1.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.3.0</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.3.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>4.0.0-M8</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.4.5</version>
                </plugin>
            </plugins>
        </pluginManagement>

        <resources>
            <resource>
                <directory>${project.basedir}/src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
    </build>

    <profiles>
        <profile>
            <id>prod</id>
            <properties>
                <app.env>prod-var</app.env>
                <example>test-test</example>
            </properties>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-compiler-plugin</artifactId>
                        <version>3.11.0</version>
                        <configuration>
                            <debug>false</debug>
                            <optimize>true</optimize>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
            <activation>
                <!--<activeByDefault>true</activeByDefault>-->
                <!--Делаем этом профиль активным по умолчанию-->
                <os>
                    <family>linux</family>
                </os>
                <!--Делаем этом профиль активным если используется ОС Linux-->
                <jdk>17</jdk>
                <!--Делаем этом профиль активным если используется JDK 17-->
                <file>
                    <exists>${basedir}/pom.xml</exists>
                </file>
                <!--Делаем этом профиль активным если в root директории проекта лежит указанный файл-->
                <!--Чтобы сделать обратное, вместо exists нужно использовать missing-->
                <property>
                    <name>profile.activation</name>
                    <value>prod</value>
                </property>
                <!--Делаем этом профиль активным если системная property установленна в нужное значение-->
                <!--В данном случае имеется ввиду -Dprofile.activation=prod-->
            </activation>
        </profile>
    </profiles>

    <distributionManagement>
        <snapshotRepository>
            <id>local-nexus</id>
            <url>http://localhost:9000/repository/maven-snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>local-nexus</id>
            <url>http://localhost:9000/repository/maven-releases/</url>
        </repository>
    </distributionManagement>

    <!--Тут настраиваем куда при деплое будут заливаться релизные и снэпшот версии.
    Чтобы проверить этот функционал, необходимо сперва развернуть контейнер с nuxus.
    Для этого в терминале вызвать команду:
    docker run -d -p 9000:8081 &#45;&#45;name nexus sonatype/nexus3
    Далее нужно зайти на nexus: localhost:9000; и поменять пароль.
    После этого файл settings.xml нужно скопировать в директорию home/{user}/.m2/
    Вызвать фазу deploy-->

</project>
