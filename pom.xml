<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <dependencies>
        <dependency>
            <groupId>jakarta.servlet</groupId>
            <artifactId>jakarta.servlet-api</artifactId>
            <version>6.0.0</version>
            <scope>provided</scope>
            <!--   provided scope говорит о том, что эта зависимость будет предоставлена чем-то.
                В данном случает Tomcat должен предоставить зависимость    -->
        </dependency>

        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>42.5.4</version>
            <scope>runtime</scope>
            <!--   runtime scope говорит о том, что эта зависимость будет использоваться только во время
                выполнения приложения, т.к. во время компиляции данная зависимость не нужна-->
            <optional>true</optional>
        </dependency>

        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>4.13.2</version>
            <scope>test</scope>
            <!--   provided scope говорит о том, что эта зависимость будет использоваться только во время
            прогонки тестов-->
        </dependency>
        <!--   compile scope является scope по умолчанию(если scope не указан, то будет использован scope compile)
            и говорит о том, что данная зависимость будет доступна во время компиляции-->
        <!--   system scope говорит о том, что эта зависимость находится на локальной машине и этот
            scope лучше не использовать-->


        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-webmvc</artifactId>
            <version>5.3.20</version>
            <exclusions>
                <exclusion>
                    <groupId>org.springframework</groupId>
                    <artifactId>spring-beans</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-aop</artifactId>
            <version>6.0.6</version>
        </dependency>
        <!--  У двух зависимостей выше есть общие транзитивные зависимости. И по умолчанию
          maven будет использовать версию из той зависимости, которая находится выше.
          Чтобы переопределить такое поведение, необходимо прописать тег exclusion в верхней зависимости
          и исключить оттуда эту транзитивную зависимость-->

        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>8.0.33</version>
            <scope>runtime</scope>
            <optional>true</optional>
            <!--    В другом проекте, который будет подтягивать данный проект как зависимость нужно будет
            определиться с тем какую из транзитивных зависимостей использовать: mysql-connector-java или postgresql-->
        </dependency>


    </dependencies>
    <groupId>com.grayroom</groupId>
    <artifactId>maven-example</artifactId>
    <version>1.0.0</version>
    <packaging>war</packaging>

    <name>maven-example</name>

    <properties>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <maven.compiler.source>1.7</maven.compiler.source>
        <maven.compiler.target>1.7</maven.compiler.target>
    </properties>

    <build>
        <finalName>MavenWebApp</finalName>
        <!--    Устанавливаем имя для итогового war файла   -->

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
                <version>3.1.2</version>

                <executions>
                    <execution>
                        <goals>
                            <goal>integration-test</goal>
                            <goal>verify</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
        <!--    Добавляем плагин, который запускает интеграционные тесты
        голы integration-test и verify автоматически будут привязаны к соответствующим фазам    -->

        <pluginManagement>
            <plugins>
                <plugin>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>3.1.0</version>
                </plugin>

                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>3.3.0</version>


                    <executions>
                        <execution>
                            <id>Copy docker-compose.yml to target</id>
                            <phase>validate</phase>
                            <goals>
                                <goal>copy-resources</goal>
                            </goals>
                            <configuration>
                                <outputDirectory>${project.basedir}/target</outputDirectory>
                                <resources>
                                    <resource>
                                        <directory>${project.basedir}/docker</directory>
                                    </resource>
                                </resources>
                            </configuration>
                        </execution>
                    </executions>
                    <!--    Вызываем goal copy-resources из maven-resources-plugin в фазе validate  -->
                </plugin>


                <plugin>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>3.8.1</version>
                    <configuration>
                        <source>17</source>
                        <target>17</target>
                    </configuration>
                </plugin>
                <!--    Чтобы переопределить дефолтные настройки какого-либо плагина в теге
                <build><pluginManagement><plugins><plugin> для плагина нужно указать нужные настройки.
                Например, тут указывается версия отличная от той, что указана в super pom.
                Так же в теге <configuration> указывается какую версию java необходимо использовать
                на этапе компиляции и в исходных java файлах    -->


                <plugin>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>2.22.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>3.0.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>3.3.2</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>3.1.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>2.8.2</version>
                </plugin>
                <plugin>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>3.7.1</version>
                </plugin>
                <plugin>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.0.0</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <distributionManagement>
        <snapshotRepository>
            <id>local-nexus</id>
            <url>http://localhost:9000/repository/maven-snapshots/</url>
        </snapshotRepository>
        <repository>
            <id>local-nexus</id>
            <url>http://localhost:9000/repository/maven-releases/</url>
        </repository>
    </distributionManagement>

    <!--Тут настраиваем куда при деплое будут заливаться релизные и снэпшот версии.
    Чтобы проверить этот функционал, необходимо сперва развернуть контейнер с nuxus.
    Для этого в терминале вызвать команду:
    docker run -d -p 9000:8081 &#45;&#45;name nexus sonatype/nexus3
    Далее нужно зайти на nexus: localhost:9000; и поменять пароль.
    После этого файл settings.xml нужно скопировать в директорию home/{user}/.m2/
    Вызвать фазу deploy-->

</project>
